-- Criação, alteração e exclusão de tabela

CREATE TABLE IF NOT EXISTS teste
(
	id SERIAL PRIMARY KEY,
	nome VARCHAR(50) NOT NULL,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

DROP TABLE IF EXISTS teste;

CREATE TABLE IF NOT EXISTS teste
(
	cpf VARCHAR(11) NOT NULL,
	nome VARCHAR(50) NOT NULL,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (cpf)
);

INSERT INTO teste (cpf, nome, created_at) VALUES ('33760016855', 'Giovana Peruchi', '2019-07-01 12:00:00');

INSERT INTO teste (cpf, nome, created_at) VALUES ('33760016855', 'Giovana Peruchi', '2019-07-01 12:00:00') ON CONFLICT (cpf) DO NOTHING;
UPDATE teste SET nome = 'Pedro Alvares' WHERE cpf = '33760016855';
SELECT * FROM teste;

-- JOIN

CREATE TABLE IF NOT EXISTS teste_a (id SERIAL PRIMARY KEY, valor VARCHAR(10));
CREATE TABLE IF NOT EXISTS teste_b (id SERIAL PRIMARY KEY, valor VARCHAR(10));

INSERT INTO teste_a (valor) VALUES ('teste1');
INSERT INTO teste_a (valor) VALUES ('teste2');
INSERT INTO teste_a (valor) VALUES ('teste3');
INSERT INTO teste_a (valor) VALUES ('teste4');
INSERT INTO teste_b (valor) VALUES ('teste_a');
INSERT INTO teste_b (valor) VALUES ('teste_b');
INSERT INTO teste_b (valor) VALUES ('teste_c');
INSERT INTO teste_b (valor) VALUES ('teste_d');

SELECT tbla.valor, tblb.valor FROM teste_a tbla CROSS JOIN teste_b tblb;

DROP TABLE IF EXISTS teste_a;
DROP TABLE IF EXISTS teste_b;

-- VIEW

CREATE TABLE IF NOT EXISTS funcionarios
(
	id SERIAL,
	nome VARCHAR(50),
	gerente INTEGER,
	PRIMARY KEY(id),
	FOREIGN KEY (gerente) REFERENCES funcionarios(id)
);
INSERT INTO funcionarios (nome, gerente) VALUES ('Anselmo', null);
INSERT INTO funcionarios (nome, gerente) VALUES ('Beatriz', 1);
INSERT INTO funcionarios (nome, gerente) VALUES ('Magno', 1);
INSERT INTO funcionarios (nome, gerente) VALUES ('Cremilda', 2);
INSERT INTO funcionarios (nome, gerente) VALUES ('Wagner', 4);
SELECT * FROM funcionarios WHERE gerente IS null;

CREATE OR REPLACE RECURSIVE VIEW vw_func (id, gerente, funcionario) AS
(
	SELECT id, gerente, nome FROM funcionarios
	WHERE gerente IS null
	
	UNION ALL
	
	SELECT funcionarios.id, funcionarios.gerente, funcionarios.nome FROM funcionarios
	JOIN vw_func ON vw_func.id = funcionarios.gerente
);

SELECT id, gerente, funcionario FROM vw_func;

-- TRANSAÇÕES

SELECT id, gerente, nome FROM funcionarios;

BEGIN;
UPDATE funcionarios SET gerente = 2 WHERE id = 3;
SAVEPOINT sf_func;
UPDATE funcionarios SET gerente = null;
ROLLBACK TO sf_func;
UPDATE funcionarios SET gerente = 3 WHERE id = 5;
COMMIT;

-- FUNÇÕES

CREATE OR REPLACE FUNCTION func_somar (INTEGER, INTEGER)
RETURNS INTEGER
SECURITY DEFINER 
--RETURNS NULL ON NULL INPUT
CALLED ON NULL INPUT
LANGUAGE SQL 
AS $$
	SELECT COALESCE ($1, 0) + COALESCE ($2, 0);
$$;

SELECT func_somar (1, null);

